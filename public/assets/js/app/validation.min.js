function encryptByAES(string, key) {
    var encrypted = CryptoJS.AES.encrypt(string, CryptoJS.enc.Utf8.parse(key), {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7,
    });
    var encrypted_val = encrypted.ciphertext.toString(CryptoJS.enc.Hex);
    return encrypted_val;
}

function decryptByAES(string, key) {
    var decrypted = CryptoJS.AES.decrypt(
        { ciphertext: CryptoJS.enc.Hex.parse(string) },
        CryptoJS.enc.Utf8.parse(key),
        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }
    );
    decrypted_val = decrypted.toString(CryptoJS.enc.Utf8);
    return decrypted_val;
}

function getValById(id) {
    var val = $("#" + id).val();
    return $.trim(val);
}

function showSnacBar(message, type) {
    if ($(".flash-message").length > 0) {
        $(".flash-message").remove();
    }
    var classname = "flash-message alert";
    if (type == "success") {
        // classname += " alert-success";
    } else if (type == "error") {
        // classname += " alert-danger";
    } else if (type == "warning") {
        // classname += " alert-warning";
    }
    var $close = $("<i>", { class: "las la-times flash-msg-close" });
    var $div = $("<div>", { class: classname, role: "alert" });
    var $closeBtn = $(
        '<button class="flash-ok-button swal2-cancel swal2-styled" onkeypress="closeFlashMsg(event)">OK</button>'
    );
    $div.html(message).append($close, $closeBtn);
    $("body").append($div);
	$(".flash-ok-button").focus(); 

    hideSnackBar();
}
function closeFlashMsg(e) {
    if (e.which == 13) {
        $(".flash-message").fadeOut("slow");
    }
}

function hideSnackBar() {
    //hide flash message
    if ($(".flash-message").length > 0) {
        setTimeout(() => {
            $(".flash-message").fadeOut("slow");
        }, 7000);
    }
}
$(document).on("click", ".flash-msg-close", function () {
    $(".flash-message").fadeOut("slow");
});

$(document).on("click", ".flash-ok-button", function () {
    $(".flash-message").fadeOut("slow");
});

function showError(ele, msg) {
    $("#" + ele).addClass("is-invalid");
    $("#" + ele)
        .parent()
        .append('<small class="form-error text-danger">' + msg + "</small>");
    error = true;
}

function showErrorByClass(ele, msg) {
    $("." + ele).addClass("is-invalid");
    $("." + ele)
        .parent()
        .append('<small class="form-error text-danger">' + msg + "</small>");
    error = true;
}
function showElementError(ele, msg) {
    $(ele).addClass("is-invalid");
    $(ele)
        .parent()
        .append('<small class="form-error text-danger">' + msg + "</small>");
    error = true;
}

//hide error message
function hideError(ele) {
    $("#" + ele).removeClass("is-invalid");
    $("#" + ele)
        .parent()
        .find($(".form-error"))
        .remove();
}
function hideErrorByClass(ele) {
    $("." + ele).removeClass("is-invalid");
    $("." + ele)
        .parent()
        .find($(".form-error"))
        .remove();
}
function hideElementError(ele) {
    $(ele).removeClass("is-invalid");
    $(ele).parent().find($(".form-error")).remove();
}

function getFormFieldValById(id) {
    var val = $("#" + id).val();
    return val.trim();
}

//trim spaces
function trimSpace(val) {
    return val.replace(/^\s*/, "").replace(/\s*$/, "");
}

//accepts number only
$(".number").keypress(function (key) {
    if (key.charCode == 0) return true;
    if (key.charCode < 48 || key.charCode > 57) return false;
});

//converts to upper
$(".upper").on("keyup", function (e) {
    $(this).val($(this).val().toUpperCase());
});

//validate mobile num
function validateMobile(mobilenum) {
    var is_valid = mobilenum.match("[0-9]{10}");
    if (null === is_valid) {
        return false;
    } else {
        return true;
    }
}

//validate email address
function validateEmail(emailadd) {
    var re =
        /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    var is_valid = re.test(emailadd);
    if (!is_valid) {
        return false;
    } else {
        return true;
    }
}

//valid govt domain address
function validateGovtDomain(domain) {
    //return true;
    if (
        domain.indexOf("gov.in") !== -1 ||
        domain.indexOf("nic.in") !== -1 ||
        domain.indexOf("wtl.co.in") !== -1
    ) {
        return true;
    } else {
        return false;
    }
}

//no free email allowed
function noFreeEmail(email) {
    var re =
        /^([\w-.]+@(?!gmail\.com)(?!yahoo\.com)(?!hotmail\.com)(?!mail\.ru)(?!yandex\.ru)(?!mail\.com)(?!rediffmail\.com)([\w-]+.)+[\w-]{2,4})?$/;
    var is_valid = re.test(email);
    if (!is_valid) {
        return false;
    } else {
        return true;
    }
}

//count character
function countChar(val, ele, max) {
    var len = val.length;
    if (len >= max) {
        val = val.substring(0, max);
    } else {
        var char = max - len;
        $("#" + ele).text(char + " characters left");
    }
}

$("input.decimal").bind("change keyup input", function () {
    var position = this.selectionStart - 1;
    //remove all but number and .
    var fixed = this.value.replace(/[^0-9\.]/g, "");
    if (fixed.charAt(0) === ".")
        //can't start with .
        fixed = fixed.slice(1);

    var pos = fixed.indexOf(".") + 1;
    if (pos >= 0)
        //avoid more than one .
        fixed = fixed.substr(0, pos) + fixed.slice(pos).replace(".", "");

    if (this.value !== fixed) {
        this.value = fixed;
        this.selectionStart = position;
        this.selectionEnd = position;
    }
});

function ValidateIPaddress(ipaddress) {
    var split_ip = ipaddress.split(".");
    var split_ip_length = split_ip.length;

    if (split_ip_length == 4) {
        if (
            split_ip[0] > 0 &&
            split_ip[0] <= 255 &&
            split_ip[1] <= 255 &&
            split_ip[1] >= 0 &&
            split_ip[1] != "" &&
            split_ip[2] >= 0 &&
            split_ip[2] <= 255 &&
            split_ip[2] != "" &&
            split_ip[3] <= 255 &&
            split_ip[3] >= 0 &&
            split_ip[3] != ""
        ) {
            return false;
        } else {
            console.log("b");
        }
    } else {
        console.log("a");
    }
    return true;
}

function ValidateIPv6address(ipaddress) {
    var expression =
        /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;

    if (expression.test(ipaddress)) {
        return false;
    } else {
        return true;
    }
}

//password validation
function validatePassword(val) {
    var regex = new RegExp(
        "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})"
    );
    if (regex.test(val)) {
        return true;
    } else {
        return false;
    }
}

$(".submit").keypress(function (e) {
    if (e.which == 13) {
        $(this).closest("form").submit();
        return false;
    }
});

$(document).on("click", ".btn-close", function () {
    var el = $(".modal").attr("id");
    $("#" + el).modal("hide");
});

//clone row
/* $(document).on('click', '.row-add', function () {
    var row = $(this).closest('.row-clone');
    var clone = row.clone();
    //clone.removeClass('row-clone').addClass('show');
    row.after(clone);
}); */

$(document).on("click", ".add-more-owner", function () {
    add_owner();
});

//add more owner
function add_owner(add = true) {
    if (!add) {
        $(".more-owener").html("");
    } else {
        var html = $(".row-clone").html();
        var count = $(".owner-count").length;
        $(".more-owener").append(html);
        add_owner_number();
    }
}

//add owner number
function add_owner_number() {
    var count = $(".owner-number").length;
    $("#owner_count").val(count - 1);
    for (i = 0; i < count; i++) {
        $(".owner-number:eq(" + i + ")").html(i + 2);
        $(".owner_vid:eq(" + i + ")").attr("disabled", false);
        if (i == count - 1) {
            $(".owner_vid:eq(" + i + ")").attr("disabled", true);
        }
    }
}

//delete row
$(document).on("click", ".row-delete", function () {
    var row_count = $(".owner-number").length;
    if (row_count > 2) {
        var row = $(this).closest(".owner-count");
        var clone = row.remove();
        add_owner_number();
    } else {
        Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "You can't remove this for multiple ownership",
            confirmButtonClass: "btn btn-primary",
            buttonsStyling: !1,
        });
    }
});

function otpTimer() {
    var otp_exp_time = $(".otp_exp_time").val();

    // The data/time we want to countdown to
    var countDownDate = new Date(otp_exp_time).getTime();

    // Run myfunc every second
    var myfunc = setInterval(function () {
        var now = new Date().getTime();
        var timeleft = countDownDate - now;

        // Calculating the days, hours, minutes and seconds left
        var days = Math.floor(timeleft / (1000 * 60 * 60 * 24));
        var hours = Math.floor(
            (timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        );
        var minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeleft % (1000 * 60)) / 1000);

        if (seconds < 10) {
            seconds = "0" + seconds;
        }

        // Result is output to the specific element
        $(".otp_timer").html(minutes + ":" + seconds);

        // Display the message when countdown is over
        if (timeleft < 0) {
            clearInterval(myfunc);
            $(".otp_timer").html("");
            $(".otp_verification_msg").html("&nbsp;");
            $(".btn-generate-otp").attr("disabled", false);
        }
    }, 1000);
}

//otp timer
if ($(".otp_timer").length > 0) {
    otpTimer();
}

//refresh captcha
$(document).on("click", ".refresh-captcha", function () {
    $("#exp_security").val("");
    var img = $("#captcha");
    var url = $(img).attr("src");
    $(img).attr(
        "src",
        url.substring(0, url.lastIndexOf("/")) + "/" + Math.random() * 1000
    );
});

//encrypt value
$(document).on("click", ".btn-encrypt", function () {
    var encrypt = $("#encrypt_val").val();
    var params = "encrypt_data=" + encrypt;
    $.ajax({
        url: BASE_URL + "do-encrypt",
        type: "post",
        data: params,
        dataType: "json",
        headers: {
            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content"),
        },
        success: function (response) {
            $(".encrypt_val").show();
            $(".encrypted-val").html(response.value);
        },
    });
});

//decrypt value
$(document).on("click", ".btn-decrypt", function () {
    var decrypt = $("#decrypt_val").val();
    var params = "decrypt_data=" + encodeURIComponent(decrypt);
    $.ajax({
        url: BASE_URL + "do-decrypt",
        type: "post",
        data: params,
        dataType: "json",
        headers: {
            "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content"),
        },
        success: function (response) {
            $(".decrypt_val").show();
            $(".decrypted-val").html(response.value);
        },
    });
});

$(document).ready(function () {
    hideSnackBar();
});


//extra field error

function extra_field_validation(value , type){

    if(type=='date'){
       // const regex = /^(0?[1-9]|[1-2][0-9]|3[0-1])\/(0?[1-9]|1[0-2])\/\d{4}$/;
        const regex = /^(0[1-9]|1\d|2\d|3[01])\/(0[1-9]|1[0-2])\/\d{4}$/;
        if (regex.test(value)) {
          return {'error': false, 'msg':''};
        } else {
            return {'error': true, 'msg':'Invalid date'};

        }
    }else{
        return {'error': false, 'msg':'Invalid date'};
    }
}


function isBase64PNG(base64String) {
    try {
      const decodedData = atob(base64String);
      // Check if the decoded data starts with the PNG file signature.
      const pngSignature = '\x89PNG\r\n\x1A\n';
      return decodedData.startsWith(pngSignature);
    } catch (e) {
      return false; // It might not be valid Base64.
    }
  }
  
  
 function camelToSnake(str) {
  return str.replace(/[A-Z]/g, match => ` ${match.toLowerCase()}`);
}

function isJSONString(str) {
  try {
    JSON.parse(str);
    return true;
  } catch (error) {
    return false;
  }
}


function metaDataToViewData(index){
	  index = index.replace(/_/g, " ");
	
	index	=	camelToSnake(index).toUpperCase();
	
	return index;
}

